<?php

/**
 * @file
 * This was auto-generated by Vactory Generator module.
 */

/**
 * Implements hook_theme().
 */
function vactory_event_theme($existing, $type, $theme, $path) {
  return [
    // Node > card.
    'node__vactory_event__card'        => [
      'base hook' => 'node',
      'template'  => 'card',
    ],
    // Node > card inline.
    'node__vactory_event__card_inline' => [
      'base hook' => 'node',
      'template'  => 'card-inline',
    ],
    // Node > Masonry.
    'node__vactory_event__masonry'     => [
      'base hook' => 'node',
      'template'  => 'masonry',
    ],
    // Node > full.
    'node__vactory_event__full'        => [
      'base hook' => 'node',
      'template'  => 'full',
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function vactory_event_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'vactory_event') {
    $node = $variables['node'];
    $date = $node->get('field_vactory_date_interval');

    if (isset($date) && !empty($date)) {
      $date = $node->get('field_vactory_date_interval')->getValue();

      if (!isset($date[0])) {
        return;
      }

      $start_date = $date[0]['value'];
      $end_date = $date[0]['end_value'];
      $date_formater = \Drupal::service('date.formatter');
      $timezones = 'UTC';

      // Start date.
      if (isset($start_date) && !empty($start_date)) {
        $variables['content']['field_vactory_date_interval']['date_start'] = [
          'day_full'  => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($start_date), 'custom', 'l', $timezones),
            '#attributes' => ['class' => ['day']],
          ],
          'day_short' => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($start_date), 'custom', 'd', $timezones),
            '#attributes' => ['class' => ['day-short']],
          ],
          'month'     => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($start_date), 'custom', 'F', $timezones),
            '#attributes' => ['class' => ['month']],
          ],
        ];

        $variables['content']['field_vactory_date_interval']['date_start_raw'] = [
          'day_full'    => $date_formater->format(strtotime($start_date), 'custom', 'l', $timezones),
          'day_short'   => $date_formater->format(strtotime($start_date), 'custom', 'd', $timezones),
          'month'       => $date_formater->format(strtotime($start_date), 'custom', 'F', $timezones),
          'month_short' => $date_formater->format(strtotime($start_date), 'custom', 'M', $timezones),
        ];
      }

      // End date.
      if (isset($end_date) && !empty($end_date) && $end_date != $start_date) {
        $variables['content']['field_vactory_date_interval']['date_end'] = [
          'day_full'  => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($end_date), 'custom', 'l', $timezones),
            '#attributes' => ['class' => ['day']],
          ],
          'day_short' => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($end_date), 'custom', 'd', $timezones),
            '#attributes' => ['class' => ['day-short']],
          ],
          'month'     => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($end_date), 'custom', 'F', $timezones),
            '#attributes' => ['class' => ['month']],
          ],
        ];

        $variables['content']['field_vactory_date_interval']['date_end_raw'] = [
          'day_full'    => $date_formater->format(strtotime($end_date), 'custom', 'l', $timezones),
          'day_short'   => $date_formater->format(strtotime($end_date), 'custom', 'd', $timezones),
          'month'       => $date_formater->format(strtotime($end_date), 'custom', 'F', $timezones),
          'month_short' => $date_formater->format(strtotime($end_date), 'custom', 'M', $timezones),
        ];
      }
    }
  }
}
